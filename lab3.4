package com.example.week3;

import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@RestController
public class CustomerController {
    private List<Customer> customers = new ArrayList<>();
    public CustomerController(){
        customers.add(new Customer("1010","John","male",25));
        customers.add(new Customer("1018","Peter","male",24));
        customers.add(new Customer("1019","Sara","female",23));
        customers.add(new Customer("1110","Rose","female",23));
        customers.add(new Customer("1001","Emma","female",30));
    }

    @RequestMapping(value = "/customers", method = RequestMethod.GET)
    public List<Customer> getCustomers() {
        return customers;
    }

    @RequestMapping(value = "/customerbyid/{id}", method = RequestMethod.GET)
    public Customer getCustomerByID(@PathVariable String id){
        for (Customer customer : this.customers){
            if (customer.getID().equals(id)){
                return customer;
            }
        }
        return null;
    }
    @RequestMapping(value = "/customerbyname/{n}", method = RequestMethod.GET)
    public Customer getCustomerByName(@PathVariable String n){
        for (Customer customer : this.customers){
            if (customer.getName().equals(n)){
                return customer;
            }
        }
        return null;
    }
    @RequestMapping(value = "/customerDelByid/{id}", method = RequestMethod.DELETE)
    public boolean delCustomerByID(@PathVariable String id){
        Customer customerToRemove = null;
        for (Customer customer : this.customers) {
            if (customer.getID().equals(id)) {
                customerToRemove = customer;
                break;
            }
        }
        if (customerToRemove != null) {
            this.customers.remove(customerToRemove);
            return true;
        } else {
            return false;
        }
    }
    @RequestMapping(value = "/customerDelByname/{n}", method = RequestMethod.DELETE)
    public boolean delCustomerByName(@PathVariable String n){
        Customer customerToRemove = null;
        for (Customer customer : this.customers) {
            if (customer.getName().equals(n)) {
                customerToRemove = customer;
                break;
            }
        }
        if (customerToRemove != null) {
            this.customers.remove(customerToRemove);
            return true;
        } else {
            return false;
        }
    }
    @RequestMapping(value = "/addCustomer", method = RequestMethod.POST)
    public boolean addCustomer(@RequestParam String id, @RequestParam String n, @RequestParam String s, @RequestParam int a){
        for (Customer customer : this.customers) {
            if (customer.getID().equals(id)) {
                return false;
            }
        }
        Customer newCustomer = new Customer(id, n, s, a);
        this.customers.add(newCustomer);
        return true;
    }
}
